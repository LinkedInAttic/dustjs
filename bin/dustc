#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    sys = require('util'),
    dust = require('../lib/dust'),
    args = process.argv.slice(2),
    name = null,
    context = null,
    render = false,
    dashdash = false,
    verbose = false;

var progress = function(note) {
    if (verbose) {
        process.stderr.write("dustc: " + note + "\r\n");
    }
};

args = args.filter(function (arg) {
    var match;

    if (arg == '--') {
        dashdash = true;
        return;
    } else if (dashdash) {
        return arg;
    } else if ((match = arg.match(/^--?([a-z][0-9a-z-]*)(?:=([^\s]+))?$/i))) {
        arg = match[1];
    } else {
        return arg;
    }

    switch (arg) {
        case 'h':
        case 'help':
            sys.puts("usage: dustc [{-v|--verbose}]");
            sys.puts("             [{-n|--name}=<template_name>]");
            sys.puts("             [ [{-r|--render}[=<sourcefile>]");
            sys.puts("               [{-c|--context}=<json_or_filename>] ]");
            sys.puts("             [{-w|--with-partials}]");
            sys.puts("             {sourcefilename|-}+ [destination]");
            process.exit(0);
            break;
        case 'n':
        case 'name':
            name = match[2];
            break;
        case 'c':
        case 'context':
            try
            {
                context = JSON.parse(match[2]);
            } catch (e) {
                context = require(path.resolve(process.cwd(), match[2]));
            }
            break;
        case 'r':
        case 'render':
            render = match[2] || true;
            break;
        case 'v':
        case 'verbose':
            verbose = true;
            break;
        case 'w':
        case 'with-partials':
            dust.onLoad = function(name, callback) {
                var resolved = path.resolve(process.cwd(), name);
                progress('resolved dependency ' + name + ' as ' + resolved);
                fs.readFile(resolved, function(e, f) {
                    callback(e, f + '');
                });
            };
            break;
    }
});

var output = (args.length > 1) ? args.pop() : null;
var inputs = [];

if (output == '-') {
    output = null;
    progress('output to STDOUT');
} else if (output) {
    output = path.resolve(process.cwd(), output);
    progress('output to ' + output);
}

var fd, template;

var fatal = function(error) {
    if (error) {
        verbose = true;
        progress(error.message || error);
        process.exit(1);
    }
};

if ((!render || render === true) && !args.length) fatal('no input files');
if (args.length > 1 && name) fatal('cannot --name multiple templates');
if (context && !render) fatal('--context makes little sense without --render');

if (output) {
    fd = fs.openSync(output, "w");
}

var writeOutput = function(error, rendered) {
    fatal(error);
    if (output) {
        fs.writeSync(fd, rendered, null, "utf8");
    } else {
        sys.print(rendered);
    }
};

if (render && render !== true) args.push(render);
var readStdin = args.indexOf('-') != -1;
var stdin = null;

var loadFiles = function (error, read) {
    var input;
    fatal(error);
    if (typeof read == 'string') {
        input = args.shift();
        var templateName = name || (input == '-' ? 'STDIN' : input);
        var as = templateName != input ? ' as ' + templateName : '';
        progress('compile ' + input + as);
        var template = dust.compile(read, templateName);
        if (render) {
            dust.loadSource(template);
            if (!args.length) {
                progress('render ' + templateName);
                dust.render(templateName, context || {}, writeOutput);
                return;
            }
        } else {
            writeOutput(null, template);
        }
    }
    if (args.length) {
        if (input == '-') {
            loadFiles(null, stdin);
        } else {
            input = path.resolve(process.cwd(), args[0]);
            fs.readFile(input, 'utf-8', loadFiles);
        }
    }
};

if (readStdin) {
    process.stdin.resume();
    process.stdin.setEncoding('utf8');
    var buffer = '';
    process.stdin.on('data', function(data) { buffer += data; });
    process.stdin.on('end', function() { stdin = buffer; loadFiles(); });
} else {
    loadFiles();
}

